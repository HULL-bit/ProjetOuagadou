#!/usr/bin/env python3
"""
Script de test pour g√©n√©rer des donn√©es marines r√©alistes
pour tester l'int√©gration de la carte marine
"""

import os
import sys
import django
import random
import math
from datetime import datetime, timedelta
from decimal import Decimal

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pirogue_smart.settings')
django.setup()

from apps.tracking.models import TrackerDevice, Location
from apps.users.models import User

def generate_marine_coordinates(center_lat=14.7167, center_lon=-17.4677, radius_km=50):
    """G√©n√®re des coordonn√©es marines r√©alistes autour de Dakar"""
    # Convertir le rayon en degr√©s (approximatif)
    radius_deg = radius_km / 111.0
    
    # G√©n√©rer un point al√©atoire dans le cercle
    angle = random.uniform(0, 2 * math.pi)
    distance = random.uniform(0, radius_deg)
    
    lat = center_lat + distance * math.cos(angle)
    lon = center_lon + distance * math.sin(angle)
    
    return lat, lon

def generate_realistic_speed():
    """G√©n√®re une vitesse r√©aliste pour un bateau de p√™che"""
    # Vitesse typique d'un bateau de p√™che: 5-25 km/h
    return random.uniform(5, 25)

def generate_realistic_heading():
    """G√©n√®re un cap r√©aliste (0-360 degr√©s)"""
    return random.uniform(0, 360)

def generate_realistic_altitude():
    """G√©n√®re une altitude r√©aliste (niveau de la mer)"""
    # Altitude proche du niveau de la mer
    return random.uniform(-5, 10)

def create_test_devices():
    """Cr√©e des dispositifs de test r√©alistes"""
    devices_data = [
        {
            'device_id': '000019246001',
            'device_type': 'gps_tracker',
            'imei': '123456789012345',
            'phone_number': '+221701234567',
            'is_active': True,
            'battery_level': 85,
            'signal_strength': 4
        },
        {
            'device_id': '000019246002',
            'device_type': 'gps_tracker',
            'imei': '123456789012346',
            'phone_number': '+221701234568',
            'is_active': True,
            'battery_level': 92,
            'signal_strength': 5
        },
        {
            'device_id': '000019246003',
            'device_type': 'gps_tracker',
            'imei': '123456789012347',
            'phone_number': '+221701234569',
            'is_active': False,
            'battery_level': 23,
            'signal_strength': 1
        },
        {
            'device_id': '000019246004',
            'device_type': 'smartphone',
            'imei': '123456789012348',
            'phone_number': '+221701234570',
            'is_active': True,
            'battery_level': 67,
            'signal_strength': 3
        },
        {
            'device_id': '000019246005',
            'device_type': 'satellite',
            'imei': '123456789012349',
            'phone_number': '+221701234571',
            'is_active': True,
            'battery_level': 78,
            'signal_strength': 4
        }
    ]
    
    # Cr√©er ou r√©cup√©rer un utilisateur de test
    user, created = User.objects.get_or_create(
        username='test_fisherman',
        defaults={
            'email': 'test@example.com',
            'first_name': 'Test',
            'last_name': 'Fisherman'
        }
    )
    
    devices = []
    for device_data in devices_data:
        device, created = TrackerDevice.objects.get_or_create(
            device_id=device_data['device_id'],
            defaults={
                'device_type': device_data['device_type'],
                'user': user,
                'imei': device_data['imei'],
                'phone_number': device_data['phone_number'],
                'is_active': device_data['is_active'],
                'battery_level': device_data['battery_level'],
                'signal_strength': device_data['signal_strength'],
                'last_communication': datetime.now()
            }
        )
        
        if not created:
            # Mettre √† jour les donn√©es existantes
            device.is_active = device_data['is_active']
            device.battery_level = device_data['battery_level']
            device.signal_strength = device_data['signal_strength']
            device.last_communication = datetime.now()
            device.save()
        
        devices.append(device)
        print(f"Dispositif {'cr√©√©' if created else 'mis √† jour'}: {device.device_id}")
    
    return devices, user

def create_test_locations(devices, user, num_locations_per_device=20):
    """Cr√©e des localisations de test r√©alistes"""
    print(f"\nG√©n√©ration de {num_locations_per_device} positions par dispositif...")
    
    # Supprimer les anciennes localisations de test
    Location.objects.filter(user=user).delete()
    
    for device in devices:
        if not device.is_active:
            continue
            
        # Point de d√©part pour ce dispositif
        start_lat, start_lon = generate_marine_coordinates()
        current_lat, current_lon = start_lat, start_lon
        
        for i in range(num_locations_per_device):
            # Simuler un mouvement r√©aliste
            if i > 0:
                # D√©placement al√©atoire
                heading = generate_realistic_heading()
                speed_kmh = generate_realistic_speed()
                speed_ms = speed_kmh / 3.6  # Convertir en m/s
                
                # D√©placement sur 5 minutes
                time_seconds = 300
                distance_meters = speed_ms * time_seconds
                distance_deg = distance_meters / 111000  # Convertir en degr√©s
                
                # Calculer la nouvelle position
                lat_change = distance_deg * math.cos(math.radians(heading))
                lon_change = distance_deg * math.sin(math.radians(heading))
                
                current_lat += lat_change
                current_lon += lon_change
            
            # Cr√©er la localisation
            location = Location.objects.create(
                user=user,
                latitude=Decimal(str(current_lat)),
                longitude=Decimal(str(current_lon)),
                speed=generate_realistic_speed(),
                heading=generate_realistic_heading(),
                altitude=generate_realistic_altitude(),
                accuracy=random.uniform(5, 15),
                timestamp=datetime.now() - timedelta(minutes=(num_locations_per_device - i) * 5)
            )
            
            print(f"Position {i+1}/{num_locations_per_device} pour {device.device_id}: "
                  f"{current_lat:.6f}, {current_lon:.6f}")
    
    print(f"\nTotal de {Location.objects.filter(user=user).count()} positions cr√©√©es")

def main():
    """Fonction principale"""
    print("=== G√©n√©ration de donn√©es marines de test ===")
    
    try:
        # Cr√©er les dispositifs
        devices, user = create_test_devices()
        
        # Cr√©er les localisations
        create_test_locations(devices, user)
        
        # Afficher les statistiques
        print("\n=== Statistiques ===")
        print(f"Utilisateur: {user.username}")
        print(f"Dispositifs cr√©√©s: {len(devices)}")
        print(f"Dispositifs actifs: {len([d for d in devices if d.is_active])}")
        print(f"Positions totales: {Location.objects.filter(user=user).count()}")
        
        # Afficher les dispositifs
        print("\n=== Dispositifs ===")
        for device in devices:
            status = "üü¢ Actif" if device.is_active else "üî¥ Inactif"
            print(f"{device.device_id} ({device.device_type}) - {status} - "
                  f"Batterie: {device.battery_level}% - Signal: {device.signal_strength}/5")
        
        print("\n‚úÖ Donn√©es de test g√©n√©r√©es avec succ√®s!")
        print("Vous pouvez maintenant tester la carte marine dans l'interface web.")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des donn√©es: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
